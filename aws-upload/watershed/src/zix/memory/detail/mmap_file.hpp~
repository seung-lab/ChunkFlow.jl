//
// Copyright (C) 2010  Aleksandar Zlateski <zlateski@mit.edu>
// ----------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

#ifndef ZI_MEMORY_DETAIL_MMAP_FILE_HPP
#define ZI_MEMORY_DETAIL_MMAP_FILE_HPP 1

#include <zi/memory/detail/file.hpp>

#include <cstring>
#include <sys/mman.h>

namespace zi {
namespace mem {
namespace detail {

class mmap_file: public file
{
public:
    inline mmap_file( const std::string& filename, int mode )
        : file( filename, mode )
    {
    }

    bool read( void *buffer,  std::size_t len, std::size_t offset = 0 )
    {
        mutex::guard g( mutex_ );
        int prot = PROT_READ;
        void *m  = mmap( NULL, len, prot, MAP_SHARED, fd_, offset );

        if ( m == MAP_FAILED || m == NULL )
        {
            throw std::runtime_error( std::string( "can't mmap file: " ) + filename_ );
        }
        else
        {
            std::memcpy( buffer, m, len );
            if ( munmap( m, len ) < 0 )
            {
                throw std::runtime_error( std::string( "can't munmap file: " ) + filename_ );
            }
        }

        return true;

    }

    bool write( const void *buffer, std::size_t len, std::size_t offset = 0 )
    {
        mutex::guard g( mutex_ );
        int prot = PROT_WRITE;

        void *m  = mmap( NULL, len, prot, MAP_SHARED, fd_, offset );

        if ( m == MAP_FAILED || m == NULL )
        {
            throw std::runtime_error( std::string( "can't mmap file: " ) + filename_ );
        }
        else
        {
            std::memcpy( m, buffer, len );
            if ( munmap( m, len ) < 0 )
            {
                throw std::runtime_error( std::string( "can't munmap file: " ) + filename_ );
            }
        }

        return true;
    }

};

} // namespace detail

using detail::mmap_file;

} // namespace mem
} // namespace zi

#endif
